const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

  // use: {
  //   loader: 'babel-loader',


// return env specific values, defaults to 'production'
function set() {
	switch (process.env.APP_ENV) {
		case 'dev':
			return {
				watch: true,
				filename: '[name]',
			}
		default:
			return {
				watch: false,
				filename: '[name].[hash]',
			}
	}
}


module.exports = () => {
  var env = set();
  

  var testPath = path.resolve(__dirname, './src/js/app.js');

  console.log("...");
  console.log(testPath);
  console.log("...");

  // entry: './src/js/app.js',

	var config = {
    // watch: env.watch,
    // main: "app.js",
    // entry: path.resolve(__dirname, './src/js/app.js'),
    // entry: [
      // path.resolve(__dirname, './src/js/app.js'),
      // path.resolve(__dirname, './src/js/app.css'),
      // path.resolve('src', 'js', 'app.js'),
      // path.resolve('src', 'styles', 'app.css'),
    // ],
    
    entry: [
      path.resolve('src', 'js', 'app.js'),
      path.resolve('src', 'styles', 'app.css'),
    ],
    
    output: {
      path: path.resolve('static', 'assets'),
      filename: 'bundle.js',
    },


    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: ['babel-loader'],      
      },{
        test: /\.css$/,
        use: [
          MiniCssExtractPlugin.loader,
          'css-loader',
          'postcss-loader',
        ],
      },
    ],
    plugins: [
      new MiniCssExtractPlugin({
        filename: env.filename + '.css',
      })
    ],

  };
  
  return config;
}
